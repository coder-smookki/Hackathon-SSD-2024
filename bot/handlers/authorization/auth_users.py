from datetime import datetime, timedelta, date
import logging

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State

from bot.keyboards.universal import confirm_cancel_keyboard
from bot.keyboards.start import start_keyboard
from bot.callbacks.authorization import Authorization
from bot.callbacks.state import InStateData
from bot.core.utils.jwt import get_expired_time_token, parse_token
from bot.core.utils.enums import Operation
from bot.core.utils.utils import is_valid_email
from bot.core.api.api_vks import AsyncAPIClient, AuthorizationException
from bot.core.models import User
from database.repositories import UserAlchemyRepo
from bot.handlers.menu.main_menu import cmd_menu



logger = logging.getLogger(__name__)
auth_router = Router(name=__name__)


class ExtractData(StatesGroup):
    """–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π: login, password, confirm"""
    email = State()
    password = State()
    confirm_check_data = State() # –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö


@auth_router.callback_query(Authorization.filter(F.operation_auth == "authorization"))
async def send_email(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.message.edit_text(text="‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É:\n\n‚öôÔ∏è –ü—Ä–∏–º–µ—Ä: hantaton10.h@mail.ru")
    await state.set_state(ExtractData.email)


@auth_router.message(ExtractData.email)
async def send_password(message: Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º email –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º password"""
    if not is_valid_email(message.text):
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ email!")
        return
    await state.update_data(email=message.text)
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:\n\n‚öôÔ∏è –ü–∞—Ä–æ–ª—å: 14Jiuqnr1sWWvo6G")
    await state.set_state(ExtractData.password)


@auth_router.message(ExtractData.password)
async def save_password(message: Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º password –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.update_data(password=message.text)
    user_data = await state.get_data()
    user_info = f"‚úâÔ∏è –ü–æ—á—Ç–∞: {user_data.get('email')}\nüîë –ü–∞—Ä–æ–ª—å: {user_data.get('password')}"

    await message.answer(
        text=f"üíæ –í—ã –≤–≤–µ–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n{user_info}\n\n‚ùó –•–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è?",
        reply_markup=confirm_cancel_keyboard
    )
    await state.set_state(ExtractData.confirm_check_data)


@auth_router.callback_query(ExtractData.confirm_check_data,
                            InStateData.filter(F.action == Operation.CANCEL))
async def no_confirm_check_data(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏—è"""
    await callback.message.edit_text(
        text="‚ùó –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", 
        reply_markup=start_keyboard
    )
    await state.clear()


@auth_router.callback_query(ExtractData.confirm_check_data, InStateData.filter())
async def yes_confirm_check_data(
        callback: CallbackQuery, 
        state: FSMContext,
        callback_data: InStateData,
        session
    ) -> None:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø, –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ–≥–æ –≤ –±–¥"""
    await state.update_data(
        confirm_check_data=callback_data.action == Operation.CONFIRM
    )
    user_data = await state.get_data()
    user_info = {
        "email": user_data.get("email"),
        "confirm_check_data": user_data.get("confirm_check_data")
    }

    try:
        auth_data = await AsyncAPIClient().auth_login(
            user_data["email"], 
            user_data["password"]
        )
    except AuthorizationException:
        await callback.message.edit_text(
            text="‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã!", 
            reply_markup=start_keyboard
        )
        await state.clear()
        return
    vcc_user = auth_data["user"]

    # —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    await state.update_data(email="*")
    await state.update_data(password="*")

    token_data = parse_token(auth_data["token"])
    token_expired_at = get_expired_time_token(auth_data["token"])
    refresh_token = token_data["refresh_token"]
    refresh_token_expired_at = get_expired_time_token(refresh_token)

    if vcc_user["birthday"] is not None:
        user_birthday = datetime.strptime(vcc_user["birthday"], "%Y-%m-%d").date()
    else: 
        user_birthday = None
    user = User(
        tg_id=callback.from_user.id,
        login=vcc_user["login"],
        email=user_info["email"],
        token=auth_data["token"],
        token_expired_at=token_expired_at,
        refresh_token=refresh_token,
        refresh_token_expired_at=refresh_token_expired_at,
        vcc_id=vcc_user["id"],
        first_name=vcc_user["firstName"],
        last_name=vcc_user["lastName"],
        midle_name=vcc_user["middleName"],
        birthday=user_birthday,
        phone=vcc_user["phone"],
    )
    await UserAlchemyRepo(session).create(user)

    logger.info(f"üìé –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.model_dump()}")

    await callback.message.edit_text(
        text="‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
    )
    await cmd_menu(
        message=callback.message, 
        state=state              
    )
    await state.set_state(None)

