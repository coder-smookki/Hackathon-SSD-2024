from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.callbacks.create_vcc import (
    StartCreateVcc, 
    ChooseBackendVcc,
    ChooseBuilding,
    ChooseRoom,
    StopAddUser
)
from bot.callbacks.universal import YesNo
from bot.callbacks.state import InStateData
from bot.handlers.create_vcc.state import (
    CreateVccState,
    CiscoSettingsState,
    VinteoSettingsState,
    ExternalSettingsState
)
from bot.keyboards.create_vcc import (
    choose_backend_keyboard, 
    stop_add_users,
    create_choose_building_keyboard,
    create_choose_room_keyboard
)
from bot.keyboards.universal import yes_no_keyboard, back_menu_keyboard
from bot.core.utils.enums import Operation
from bot.core.utils.utils import parse_datetime
from bot.core.api.api_vks import AsyncAPIClient
from bot.core.utils.utils import is_valid_email
from database.models import UserModel
from bot.handlers.create_vcc.formulations import (
    CREATION_VKS_CISCO, 
    CREATION_VKS_EXTERNAL,
    CREATION_VKS_VINTEO,
    END_CREATION_VKS
)


create_vcc_router = Router(name=__name__)


@create_vcc_router.callback_query(StartCreateVcc.filter())
async def start_create(
        callback: CallbackQuery, 
        state: FSMContext,
    ):
    """ –°—Ç–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω–∏—è, –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ """
    await state.set_state(CreateVccState.name)
    await callback.message.edit_text("üìã –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–ö–°:")
    await callback.message.edit_reply_markup(reply_markup=back_menu_keyboard)


@create_vcc_router.message(CreateVccState.name)
async def get_name(
        message: Message, 
        state: FSMContext
    ):
    """ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏, –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è """
    await state.update_data(name=message.text)
    await state.set_state(CreateVccState.date)
    await message.answer("‚åõ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î –ú–ú –ì–ì–ì–ì –ß–ß –ú–ú (–≥–æ–¥ –º–µ—Å—è—Ü –¥–µ–Ω—å —á–∞—Å –º–∏–Ω—É—Ç–∞):\n\n‚öôÔ∏è –ü—Ä–∏–º–µ—Ä: 28 11 2024 10 10",
        reply_markup=back_menu_keyboard)

@create_vcc_router.message(CreateVccState.date)
async def get_date(
        message: Message, 
        state: FSMContext
    ):
    """ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è, –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è """
    try:
        update_data = parse_datetime(message.text)
    except Exception:
        await message.answer("‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –¥–∞—Ç—É\n\n‚öôÔ∏è –ü—Ä–∏–º–µ—Ä: 28 11 2024 10 10",
        reply_markup=back_menu_keyboard)
        return

    await state.update_data(date=update_data)
    await state.set_state(CreateVccState.duration)
    await message.answer("‚åõ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –í–ö–° –≤ –º–∏–Ω—É—Ç–∞—Ö:",
        reply_markup=back_menu_keyboard)


@create_vcc_router.message(CreateVccState.duration)
async def get_duration(
        message: Message, 
        state: FSMContext
    ):
    """ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∑–∞–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ """
    try:
        data = int(message.text)
    except ValueError:
        await message.answer("‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!")
        return
    await state.update_data(duration=data)
    await state.set_state(CreateVccState.participants_count_vks)
    await message.answer("üôç –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –í–ö–°:",
        reply_markup=back_menu_keyboard)


@create_vcc_router.message(CreateVccState.participants_count_vks)
async def get_participants_count(
        message: Message, 
        state: FSMContext
    ):
    """ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –∑–∞–ø—Ä–æ—Å backend """
    try:
        data = int(message.text)
    except ValueError:
        await message.answer("‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!")
        return
    await state.update_data(participants_count=data)
    await state.set_state(CreateVccState.backend)
    await message.answer(
        "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –í–ö–°:", 
        reply_markup=choose_backend_keyboard
    )



@create_vcc_router.callback_query(
    CreateVccState.backend, 
    ChooseBackendVcc.filter(F.name == "cisco")
)
async def start_get_cisco_settings(
        callback: CallbackQuery, 
        state: FSMContext,
    ):
    """ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ backend, –∑–∞–ø—Ä–æ—Å is_microphone_on """
    await state.update_data(backend = "cisco")
    await state.set_state(CiscoSettingsState.is_microphone_on)
    await callback.message.edit_text(
        text = "üìç –í–∫–ª—é—á–∞—Ç—å –ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ?",
        reply_markup=yes_no_keyboard
    )

@create_vcc_router.callback_query(
    CiscoSettingsState.is_microphone_on,
    YesNo.filter()
)
async def start_get_cisco_settings(
        callback: CallbackQuery, 
        callback_data: YesNo,
        state: FSMContext,
    ):
    """ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ is_microphone_on, –∑–∞–ø—Ä–æ—Å is_video_on """
    await state.update_data(is_microphone_on = callback_data.result=="–î–∞")
    await state.set_state(CiscoSettingsState.is_video_on)
    await callback.message.edit_text(
        text = "üìç –í–∫–ª—é—á–∞—Ç—å –ª–∏ –≤–∏–¥–µ–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ?",
        reply_markup=yes_no_keyboard
    )

@create_vcc_router.callback_query(
    CiscoSettingsState.is_video_on,
    YesNo.filter()
)
async def start_get_cisco_settings(
        callback: CallbackQuery, 
        callback_data: YesNo,
        state: FSMContext,
    ):
    """ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ is_video_on, –∑–∞–ø—Ä–æ—Å is_waiting_room_enabled """
    await state.update_data(is_video_on = callback_data.result=="–î–∞")
    await state.set_state(CiscoSettingsState.is_waiting_room_enabled)
    await callback.message.edit_text(
        text = "üìç –í–∫–ª—é—á–∞—Ç—å –ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –í–ö–°?",
        reply_markup=yes_no_keyboard
    )

@create_vcc_router.callback_query(
    CiscoSettingsState.is_waiting_room_enabled,
    YesNo.filter()
)
async def start_get_cisco_settings(
        callback: CallbackQuery, 
        callback_data: YesNo,
        state: FSMContext,
    ):
    """ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ is_waiting_room_enabled, –∑–∞–ø—Ä–æ—Å need_video_recording """
    await state.update_data(is_waiting_room_enabled = callback_data.result=="–î–∞")
    await state.set_state(CiscoSettingsState.need_video_recording)
    await callback.message.edit_text(
        text = "üìç –í–∫–ª—é—á–∞—Ç—å –ª–∏ –≤–∏–¥–µ–æ –∑–∞–ø–∏—Å—å?",
        reply_markup=yes_no_keyboard
    )

@create_vcc_router.callback_query(
    CiscoSettingsState.need_video_recording,
    YesNo.filter()
)
async def start_get_cisco_settings(
        callback: CallbackQuery, 
        callback_data: YesNo,
        state: FSMContext,
    ):
    """ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ need_video_recording, –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö """
    data = await state.get_data()
    await state.update_data(settings = {
        "isMicrophoneOn": data["is_microphone_on"],
        "isVideoOn": data["is_video_on"],
        "isWaitingRoomEnabled": data["is_waiting_room_enabled"],
        "needVideoRecording": callback_data.result=="–î–∞",
    })

    await state.set_state(CreateVccState.participants)
    await state.update_data(participants=[])
    await callback.message.edit_text(
        "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –í–ö–°", 
        reply_markup=stop_add_users
    )



@create_vcc_router.callback_query(
    CreateVccState.backend, 
    ChooseBackendVcc.filter(F.name == "external")
)
async def start_get_external_settings(
        callback: CallbackQuery, 
        state: FSMContext,
    ):
    """ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ backend, –∑–∞–ø—Ä–æ—Å external_url """
    await state.update_data(backend = "external")
    await state.set_state(ExternalSettingsState.external_url)
    await callback.message.edit_text(
        text = "üìé –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É:",
    )

@create_vcc_router.message(ExternalSettingsState.external_url)
async def start_get_external_settings(
        message: Message, 
        state: FSMContext,
    ):
    """ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ external_url, –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö """
    await state.update_data(settings = {
        "externalUrl": message.text
    })

    await state.set_state(CreateVccState.participants)
    await state.update_data(participants=[])
    await message.answer(
        "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –í–ö–°", 
        reply_markup=stop_add_users
    )



@create_vcc_router.callback_query(
    CreateVccState.backend, 
    ChooseBackendVcc.filter(F.name == "vinteo")
)
async def start_get_external_settings(
        callback: CallbackQuery, 
        state: FSMContext,
    ):
    """ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ backend, –∑–∞–ø—Ä–æ—Å need_video_recording """
    await state.update_data(backend = "vinteo")
    await state.set_state(VinteoSettingsState.need_video_recording)
    await callback.message.edit_text(
        text = "üìç –í–∫–ª—é—á–∞—Ç—å –ª–∏ –≤–∏–¥–µ–æ –∑–∞–ø–∏—Å—å?",
        reply_markup=yes_no_keyboard
    )

@create_vcc_router.callback_query(
    VinteoSettingsState.need_video_recording,
    YesNo.filter()
)
async def start_get_external_settings(
        callback: CallbackQuery, 
        callback_data: YesNo,
        state: FSMContext,
    ):
    """ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ need_video_recording, –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö """
    await state.update_data(settings = {
        "needVideoRecording": callback_data.result=="–î–∞"
    })
    await state.set_state(CreateVccState.participants)
    await state.update_data(participants=[])
    await callback.message.edit_text(
        "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –í–ö–°", 
        reply_markup=stop_add_users
    )
    



@create_vcc_router.message(CreateVccState.participants)
async def get_participants(
        message: Message, 
        state: FSMContext,
        api_client: AsyncAPIClient,
        token: str
    ):
    if not is_valid_email(message.text):
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ email!", reply_markup=stop_add_users)
        return
    user_data = await api_client.get_user(token, message.text)
    if not user_data["data"]["data"]:
        await message.answer("‚ùå –≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É", reply_markup=stop_add_users)
        return
    data = await state.get_data()
    if {"id": user_data["data"]["data"][0]["id"]} in data["participants"]:
        await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=stop_add_users)
        return
    data["participants"].append({"id": user_data["data"]["data"][0]["id"]})
    await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω", reply_markup=stop_add_users)


@create_vcc_router.callback_query(
        CreateVccState.participants, 
        StopAddUser.filter()
)
async def cancel_participants(
        callback: CallbackQuery, 
        state: FSMContext,
    ):
    await state.set_state(CreateVccState.set_room)
    await callback.message.edit_text(
        text = "üîí –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —É–∫–∞–∑–∞—Ç—å –ø–æ–º–µ—â–µ–Ω–∏–µ –í–ö–°?",
        reply_markup=yes_no_keyboard
    )


# –º–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç—ã?
@create_vcc_router.callback_query(
        CreateVccState.set_room,
        YesNo.filter(F.result == "–ù–µ—Ç")
)
async def no_set_room(
        callback: CallbackQuery, 
        state: FSMContext,
        token: str,
        user: UserModel
    ): 
    await state.set_state(CreateVccState.check_data)
    state_data = await state.get_data()
    data = dict(
        jwt_token=token, # –æ—Ç —Ç—É—Ç –Ω–µ –Ω—É–∂–µ–Ω
        organizer_id=user.vcc_id,
        name_vks=state_data["name"],
        date_vks=state_data["date"],
        duration_vks=state_data["duration"],
        participants_count_vks=state_data["participants_count"],
        participants=[{"email": "hantaton8.h@mail.ru"}],
        backend=state_data["backend"],
        settings=state_data["settings"]
    )
    if state_data["backend"] == "cisco":
        result = CREATION_VKS_CISCO.format(
            name=data['name_vks'], participantsCount=data['participants_count_vks'],
            startedAt=data['date_vks'], duration=data['duration_vks'],
            backend=data['backend'], 
            isMicrophoneOn='–î–∞' if bool(data['settings']['isMicrophoneOn']) else '–ù–µ—Ç',
            isVideoOn='–î–∞' if bool(data['settings']['isVideoOn']) else '–ù–µ—Ç',
            isWaitingRoomEnabled='–î–∞' if bool(data['settings']['isWaitingRoomEnabled']) else '–ù–µ—Ç',
            needVideoRecording='–î–∞' if bool(data['settings']['needVideoRecording']) else '–ù–µ—Ç'
        )
    elif state_data["backend"] == "external":
        result = CREATION_VKS_EXTERNAL.format(
            name=data['name_vks'], participantsCount=data['participants_count_vks'],
            startedAt=data['date_vks'], duration=data['duration_vks'],
            backend=data['backend'], 
            externalUrl=data['settings']['externalUrl']
        )
    if state_data["backend"] == "vinteo":
        result = CREATION_VKS_VINTEO.format(
            name=data['name_vks'], participantsCount=data['participants_count_vks'],
            startedAt=data['date_vks'], duration=data['duration_vks'],
            backend=data['backend'], 
            needVideoRecording='–î–∞' if bool(data['settings']['needVideoRecording']) else '–ù–µ—Ç'
        )
    await callback.message.edit_text(
        text=result,
        reply_markup=yes_no_keyboard
    )


    
    
@create_vcc_router.callback_query(
        CreateVccState.set_room,
        YesNo.filter(F.result == "–î–∞")
)
async def yes_set_room(
        callback: CallbackQuery, 
        state: FSMContext,
        api_client: AsyncAPIClient,
        token: str,
    ):
    await state.set_state(CreateVccState.building)
    data = await api_client.get_buildings(token)
    await callback.message.edit_text(
        "üîí –í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ, –≥–¥–µ –±—É–¥–µ—Ç –í–ö–°.", 
        reply_markup=create_choose_building_keyboard(data["data"]["data"])
    )

@create_vcc_router.callback_query(
        CreateVccState.building,
        ChooseBuilding.filter()
)
async def get_building(
        callback: CallbackQuery, 
        callback_data: ChooseBuilding,
        state: FSMContext,
        api_client: AsyncAPIClient,
        token: str,
    ):
    await state.set_state(CreateVccState.room)
    data = await api_client.get_rooms(token, callback_data.id)
    await callback.message.edit_text(
        "üîí –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –í–ö–°.", 
        reply_markup=create_choose_room_keyboard(data["data"]["data"])
    )

@create_vcc_router.callback_query(
        CreateVccState.room,
        ChooseRoom.filter()
)
async def get_room(
        callback: CallbackQuery, 
        callback_data: ChooseRoom,
        state: FSMContext,
        api_client: AsyncAPIClient,
        token: str,
        user: UserModel
    ):
    await state.set_state(CreateVccState.check_data)
    state_data = await state.get_data()
    data = dict(
        jwt_token=token, # –æ—Ç —Ç—É—Ç –Ω–µ –Ω—É–∂–µ–Ω
        organizer_id=user.vcc_id,
        name_vks=state_data["name"],
        date_vks=state_data["date"],
        duration_vks=state_data["duration"],
        participants_count_vks=state_data["participants_count"],
        participants=state_data["participants"],
        backend=state_data["backend"],
        settings=state_data["settings"],
        place=callback_data.id
    )
    if state_data["backend"] == "cisco":
        result = CREATION_VKS_CISCO.format(
            name=data['name_vks'], participantsCount=data['participants_count_vks'],
            startedAt=data['date_vks'], duration=data['duration_vks'],
            backend=data['backend'], 
            isMicrophoneOn='–î–∞' if bool(data['settings']['isMicrophoneOn']) else '–ù–µ—Ç',
            isVideoOn='–î–∞' if bool(data['settings']['isVideoOn']) else '–ù–µ—Ç',
            isWaitingRoomEnabled='–î–∞' if bool(data['settings']['isWaitingRoomEnabled']) else '–ù–µ—Ç',
            needVideoRecording='–î–∞' if bool(data['settings']['needVideoRecording']) else '–ù–µ—Ç'
        )
    elif state_data["backend"] == "external":
        result = CREATION_VKS_EXTERNAL.format(
            name=data['name_vks'], participantsCount=data['participants_count_vks'],
            startedAt=data['date_vks'], duration=data['duration_vks'],
            backend=data['backend'], 
            externalUrl=data['settings']['externalUrl']
        )
    if state_data["backend"] == "vinteo":
        result = CREATION_VKS_VINTEO.format(
            name=data['name_vks'], participantsCount=data['participants_count_vks'],
            startedAt=data['date_vks'], duration=data['duration_vks'],
            backend=data['backend'], 
            needVideoRecording='–î–∞' if bool(data['settings']['needVideoRecording']) else '–ù–µ—Ç'
        )
    await callback.message.edit_text(
        text=result,
        reply_markup=yes_no_keyboard
    )
    



@create_vcc_router.callback_query(
        CreateVccState.check_data,
        YesNo.filter(F.result == "–ù–µ—Ç")
)
async def no_check_data(
        callback: CallbackQuery, 
        state: FSMContext,
    ):
    """ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ """
    await state.clear()
    await start_create(callback, state)

@create_vcc_router.callback_query(
        CreateVccState.check_data,
        YesNo.filter(F.result == "–î–∞")
)
async def yes_check_data(
        callback: CallbackQuery, 
        state: FSMContext,
        api_client: AsyncAPIClient,
        token: str,
        user: UserModel
    ):
    """ –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ """
    state_data = await state.get_data()
    data = await api_client.create_meeting(
        jwt_token=token,
        organizer_id=user.vcc_id,
        name_vks=state_data["name"],
        date_vks=state_data["date"],
        duration_vks=state_data["duration"],
        participants_count_vks=state_data["participants_count"],
        participants=state_data["participants"],
        backend=state_data["backend"],
        settings=state_data["settings"]
    )
    if data["status"] != 201:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n" + "–î–µ—Ç–∞–ª–∏: " + str(data["data"]['detail']),
            reply_markup=back_menu_keyboard
        )
    else:
        await callback.message.edit_text(
            END_CREATION_VKS.format(permalink=data["data"]['permalink'],
                participants=[participant['email'] for participant in data["data"]['participants']]),
            reply_markup=back_menu_keyboard
            )