from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.callbacks.create_vcc import (
    StartCreateVcc, 
    ChooseBackendVcc,
    ChooseBuilding,
    ChooseRoom,
    StopAddUser
)
from bot.callbacks.universal import YesNo
from bot.callbacks.state import InStateData
from bot.handlers.create_vcc.state import (
    CreateVccState,
    CiscoSettingsState,
    VinteoSettingsState,
    ExternalSettingsState
)
from bot.keyboards.create_vcc import (
    choose_backend_keyboard, 
    stop_add_users,
    create_choose_building_keyboard,
    create_choose_room_keyboard
)
from bot.keyboards.universal import yes_no_keyboard, back_menu_keyboard
from bot.core.utils.enums import Operation
from bot.core.utils.utils import parse_datetime
from bot.core.api.api_vks import AsyncAPIClient
from bot.core.utils.utils import is_valid_email
from database.models import UserModel
from bot.handlers.create_vcc.formulations import (
    CREATION_VKS_CISCO, 
    CREATION_VKS_EXTERNAL,
    CREATION_VKS_VINTEO,
    END_CREATION_VKS
)


base_data_vcc_router = Router(name=__name__)


@base_data_vcc_router.callback_query(StartCreateVcc.filter())
async def start_create(
        callback: CallbackQuery, 
        state: FSMContext,
    ):
    """ –°—Ç–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω–∏—è, –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ """
    await state.set_state(CreateVccState.name)
    await callback.message.edit_text("üìã –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–ö–°:")


@base_data_vcc_router.message(CreateVccState.name)
async def get_name(
        message: Message, 
        state: FSMContext
    ):
    """ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏, –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è """
    await state.update_data(name=message.text)
    await state.set_state(CreateVccState.date)
    await message.answer("‚åõ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î –ú–ú –ì–ì–ì–ì –ß–ß –ú–ú (–≥–æ–¥ –º–µ—Å—è—Ü –¥–µ–Ω—å —á–∞—Å –º–∏–Ω—É—Ç–∞):\n\n‚öôÔ∏è –ü—Ä–∏–º–µ—Ä: 28 11 2024 10 10")

@base_data_vcc_router.message(CreateVccState.date)
async def get_date(
        message: Message, 
        state: FSMContext
    ):
    """ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è, –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è """
    try:
        update_data = parse_datetime(message.text)
    except Exception:
        await message.answer("‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –¥–∞—Ç—É\n\n‚öôÔ∏è –ü—Ä–∏–º–µ—Ä: 28 11 2024 10 10")
        return

    await state.update_data(date=update_data)
    await state.set_state(CreateVccState.duration)
    await message.answer("‚åõ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –í–ö–° –≤ –º–∏–Ω—É—Ç–∞—Ö:")


@base_data_vcc_router.message(CreateVccState.duration)
async def get_duration(
        message: Message, 
        state: FSMContext
    ):
    """ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∑–∞–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ """
    try:
        data = int(message.text)
    except ValueError:
        await message.answer("‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!")
        return
    await state.update_data(duration=data)
    await state.set_state(CreateVccState.participants_count_vks)
    await message.answer("üôç –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –í–ö–°:")


@base_data_vcc_router.message(CreateVccState.participants_count_vks)
async def get_participants_count(
        message: Message, 
        state: FSMContext
    ):
    """ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –∑–∞–ø—Ä–æ—Å backend """
    try:
        data = int(message.text)
    except ValueError:
        await message.answer("‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!")
        return
    await state.update_data(participants_count=data)
    await state.set_state(CreateVccState.backend)
    await message.answer(
        "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –í–ö–°:", 
        reply_markup=choose_backend_keyboard
    )