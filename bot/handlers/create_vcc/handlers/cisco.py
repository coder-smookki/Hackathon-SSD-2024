from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from bot.callbacks.create_vcc import ChooseBackendVcc
from bot.callbacks.universal import YesNo
from bot.handlers.create_vcc.state import CiscoSettingsState, CreateVccState
from bot.keyboards.create_vcc import stop_add_users
from bot.keyboards.universal import yes_no_keyboard

cisco_vcc_router = Router(name=__name__)


@cisco_vcc_router.callback_query(
    CreateVccState.backend, ChooseBackendVcc.filter(F.name == "cisco")
)
async def start_get_cisco_settings(
    callback: CallbackQuery,
    state: FSMContext,
):
    """—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ backend, –∑–∞–ø—Ä–æ—Å is_microphone_on"""
    await state.update_data(backend="cisco")
    await state.set_state(CiscoSettingsState.is_microphone_on)
    await callback.message.edit_text(
        text="üìç –í–∫–ª—é—á–∞—Ç—å –ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ?", reply_markup=yes_no_keyboard
    )


@cisco_vcc_router.callback_query(CiscoSettingsState.is_microphone_on, YesNo.filter())
async def start_get_cisco_settings(
    callback: CallbackQuery,
    callback_data: YesNo,
    state: FSMContext,
):
    """—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ is_microphone_on, –∑–∞–ø—Ä–æ—Å is_video_on"""
    await state.update_data(is_microphone_on=callback_data.result == "–î–∞")
    await state.set_state(CiscoSettingsState.is_video_on)
    await callback.message.edit_text(
        text="üìç –í–∫–ª—é—á–∞—Ç—å –ª–∏ –≤–∏–¥–µ–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ?", reply_markup=yes_no_keyboard
    )


@cisco_vcc_router.callback_query(CiscoSettingsState.is_video_on, YesNo.filter())
async def start_get_cisco_settings(
    callback: CallbackQuery,
    callback_data: YesNo,
    state: FSMContext,
):
    """—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ is_video_on, –∑–∞–ø—Ä–æ—Å is_waiting_room_enabled"""
    await state.update_data(is_video_on=callback_data.result == "–î–∞")
    await state.set_state(CiscoSettingsState.is_waiting_room_enabled)
    await callback.message.edit_text(
        text="üìç –í–∫–ª—é—á–∞—Ç—å –ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –í–ö–°?", reply_markup=yes_no_keyboard
    )


@cisco_vcc_router.callback_query(
    CiscoSettingsState.is_waiting_room_enabled, YesNo.filter()
)
async def start_get_cisco_settings(
    callback: CallbackQuery,
    callback_data: YesNo,
    state: FSMContext,
):
    """—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ is_waiting_room_enabled, –∑–∞–ø—Ä–æ—Å need_video_recording"""
    await state.update_data(is_waiting_room_enabled=callback_data.result == "–î–∞")
    await state.set_state(CiscoSettingsState.need_video_recording)
    await callback.message.edit_text(
        text="üìç –í–∫–ª—é—á–∞—Ç—å –ª–∏ –≤–∏–¥–µ–æ –∑–∞–ø–∏—Å—å?", reply_markup=yes_no_keyboard
    )


@cisco_vcc_router.callback_query(
    CiscoSettingsState.need_video_recording, YesNo.filter()
)
async def start_get_cisco_settings(
    callback: CallbackQuery,
    callback_data: YesNo,
    state: FSMContext,
):
    """—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ need_video_recording, –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö"""
    data = await state.get_data()
    await state.update_data(
        settings={
            "isMicrophoneOn": data["is_microphone_on"],
            "isVideoOn": data["is_video_on"],
            "isWaitingRoomEnabled": data["is_waiting_room_enabled"],
            "needVideoRecording": callback_data.result == "–î–∞",
        }
    )

    await state.set_state(CreateVccState.participants)
    await state.update_data(participants=[])
    await callback.message.edit_text(
        "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –í–ö–°",
        reply_markup=stop_add_users,
    )
